---

# dy/dx = (x-y)/2
# Example taken from here: https://www.geeksforgeeks.org/runge-kutta-4th-order-method-solve-differential-equation/

# dODE solver_type uses a special consideration :-
    # a RungeKuttaFehlberg56 for non-stiff problems and a BackwardEuler method for stiff problems.
    # non-stiff = optimal_step_size >= 1.0e-6
    # stiff = optimal_step_size < 1.0e-6
    #

partitions:
    1:
        solver_type: dODE
        start_step_size: 0.1
        local_error_maximum: 1.0e-6
        local_error_minimum: 1.0e-12
        explicit_implicit_switch_step_size_tolerance: 1.0e-4
nodes:
    :node_y:
        initial_value: 1
    :timepoint:
        initial_value: 0
edges:
    :y_equals_x:
        partition: 1
        inputs:
            input1: :timepoint
            input2: :node_y
        lambda: fn(input1,input2) -> (input1 - input2)/2 end
        outputs:
            :node_y: add